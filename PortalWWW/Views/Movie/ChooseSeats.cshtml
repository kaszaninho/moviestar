@using DatabaseAPI.Models.CinemaMovie;
@model IEnumerable<DatabaseAPI.Models.CinemaMovie.ScreeningSeat>
@{
    ViewData["Title"] = "Choose Your Seats";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<head>
    <link href="~/css/custom.css" rel="stylesheet" />
    <style>
        .screening-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-top: 20px;
            width: 100%;
        }

        .screening {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            text-align: center;
            width: 100%;
            max-width: 900px;
            margin: auto;
            padding-bottom: 50px; 
        }

        .screen {
            width: 60%;
            height: 50px;
            background: #444;
            margin-bottom: 20px;
            text-align: center;
            color: white;
            line-height: 50px;
            font-weight: bold;
        }

        .seats-container {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 8px;
            max-width: 500px;
            padding: 20px;
        }

        .row {
            display: flex;
            justify-content: center;
            width: 100%;
            flex-wrap: nowrap;
        }

        .seat {
            width: 35px;
            height: 35px;
            background-color: #444;
            border-radius: 5px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 14px;
            cursor: pointer;
        }

            .seat.selected {
                background-color: green;
            }

            .seat.occupied {
                background-color: red;
                cursor: not-allowed;
            }
    </style>
</head>

<div class="container align-content-center text-center d-flex flex-column align-items-center">
    <div class="screening">
        <div class="screening-container">
            <div class="screening-info">
                <h2 class="text-primary text-center">Choose Your Seats</h2>
                <p>Screening ID: @ViewData["ScreeningId"]</p>
                <p>Movie Name: @ViewData["MovieName"]</p>
                <p>Date: @ViewData["Date"]</p>
            </div>
            <div class="screen">SCREEN</div>

            <ul class="showcase">
                <li><div class="seat"></div><small>N/A</small></li>
                <li><div class="seat selected"></div><small>Selected</small></li>
                <li><div class="seat occupied"></div><small>Occupied</small></li>
            </ul>

            <div class="seats-container">
                @foreach (var rowGroup in Model.GroupBy(s => s.Seat.Row).OrderBy(g => g.Key))
                {
                    <div class="row">
                        @foreach (var screeningSeat in rowGroup.OrderBy(s => int.Parse(s.Seat.Name.Substring(1))))
                        {
                            string seatClass = screeningSeat.IsTaken == true ? "seat occupied" : "seat";
                            <div class="@seatClass" data-seat="@($"{(char)(64 + screeningSeat.Seat.Row)}{screeningSeat.Seat.NumberInRow}")"
                                 data-seatid="@screeningSeat.Id">
                                @($"{(char)(64 + screeningSeat.Seat.Row)}{screeningSeat.Seat.NumberInRow}")
                            </div>
                        }
                    </div>
                }
            </div>
        </div>

        <p class="text">You have selected <span id="seatsSelected">0</span> seats.</p>
        <button id="submitSeats" class="btn btn-danger">Confirm Selection</button>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const container = document.querySelector('.seats-container');
            const seatsSelected = document.getElementById('seatsSelected');
            const submitButton = document.getElementById('submitSeats');
            let selectedSeats = [];

            const updateSeatCount = () => {
                seatsSelected.innerText = selectedSeats.length;
            };

            container.addEventListener('click', (e) => {
                if (e.target.classList.contains('seat') && !e.target.classList.contains('occupied')) {
                    const seatId = e.target.dataset.seatid;
                    if (selectedSeats.includes(seatId)) {
                        selectedSeats = selectedSeats.filter(id => id !== seatId);
                        e.target.classList.remove('selected');
                    } else {
                        selectedSeats.push(seatId);
                        e.target.classList.add('selected');
                    }
                    updateSeatCount();
                }
            });

            submitButton.addEventListener('click', () => {
                fetch('/Movie/DetailsOfChosenSeats', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ selectedSeats: selectedSeats })
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Failed to submit seat selection.');
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.redirectUrl) {
                            window.location.href = data.redirectUrl;
                        }
                    })
                    .catch(error => console.error('Error:', error));
            });
        });
    </script>
}
