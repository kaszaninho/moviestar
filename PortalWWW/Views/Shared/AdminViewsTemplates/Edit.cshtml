@using static PortalWWW.Helpers.GenericCheck;
@model dynamic

@{
    ViewData["Title"] = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
    Type entityType = ViewData["type"] as Type;
    string partialViewName = (string)ViewData["PartialViewName"];
    var properties = entityType.GetProperties();
    string id = "Id";
}

<link href="https://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.18/summernote-lite.min.css" rel="stylesheet">

<div class="container">
    <div class="row pt-4 pb-3">
        <div class="col-6">
            <h4 class="text-primary">Edit @entityType.Name</h4>
        </div>
        <div class="col-6 text-end">
            <a asp-action="Index" class="btn btn-primary m-2 custom-btn">
                <i class="bi bi-arrow-left"></i> Back to List
            </a>
        </div>
    </div>

    <div class="table-responsive">
        <form asp-action="EditConfirmed" method="post" enctype="multipart/form-data">
            <table class="table table-bordered table-striped table-hover custom-table">
                <input asp-for="@id" type="hidden" class="form-control" ) />
                <div class="table-responsive">
                    <table id="tblData" class="table table-bordered table-striped table-hover custom-table">

                        <thead>
                    <tr>
                        <th>Edit @entityType.Name</th>
                    </tr>
                </thead>
                    </table>
                </div>
                <tbody>
                    @foreach (var prop in properties)
                    {
                        if (IsGenericCollection(prop.PropertyType)) continue;
                        if (!ShouldShowPropertyOnCreate(prop.Name)) continue;
                        if (IsId(prop.Name)) continue;
                        if (IsTypeOfBaseDatatable(prop.PropertyType)) continue;

                        bool isBoolean = prop.PropertyType == typeof(bool) || Nullable.GetUnderlyingType(prop.PropertyType) == typeof(bool);
                        bool isIsActive = prop.Name.Equals("IsActive", StringComparison.OrdinalIgnoreCase);

                        <tr>
                            <td><strong><label for="@prop.Name" class="form-label">@prop.Name</label></strong></td>
                            <td>
                                <div >
                                    @if (prop.PropertyType == typeof(string))
                                    {
                                        <textarea id="@prop.Name" name="@prop.Name" class="form-control"
                                                  style="min-height: 150px; width: 100%; resize: vertical; text-align: left; color: white; white-space: pre-line;">
                                            @(@prop.GetValue(Model) ?? "")
        </textarea>
 
                                    }
                                    else if (isBoolean && isIsActive)
                                    {
                                        <!-- Fancy Radio Button for isActive -->
                                        <div class="d-flex gap-3">
                                            <div class="form-check">
                                                <input class="form-check-input" type="radio" name="@prop.Name" id="@prop.Name-yes" value="true" @(Convert.ToBoolean(prop.GetValue(Model)) ? "checked" : "")>
                                                <label class="form-check-label" for="@prop.Name-yes">Active</label>
                                            </div>
                                            <div class="form-check">
                                                <input class="form-check-input" type="radio" name="@prop.Name" id="@prop.Name-no" value="false" @(!Convert.ToBoolean(prop.GetValue(Model)) ? "checked" : "")>
                                                <label class="form-check-label" for="@prop.Name-no">Inactive</label>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <input id="@prop.Name" name="@prop.Name" @TextTypeBasedOnPropertyType(prop.PropertyType) class="form-control" value="@prop.GetValue(Model)" />
                                    }
                                    <span asp-validation-for="@prop.Name" class="text-danger"></span>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            @if (partialViewName != null)
            {
                @await Html.PartialAsync(partialViewName)
            }

            <div class="form-group mt-3">
                <input type="submit" value="Update" class="btn btn-success m-2 custom-btn" />
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.18/summernote-lite.min.js"></script>

    <script>
        $(document).ready(function () {
            $('.summernote').summernote();
        });
    </script>

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
